name: Deploy to EC2

on:
  push:
    branches:
      - develop
      - CICD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          eval "$(ssh-agent -s)"
          ssh-add private_key.pem

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: SSH into EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu
          
            echo "MONGO_DATABASE=${MONGO_DATABASE}" >> .env
            echo "MONGO_USERNAME=${MONGO_USERNAME}" >> .env
            echo "MONGO_PASSWORD=${MONGO_PASSWORD}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
            echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> .env
            echo "MYSQL_USER=${MYSQL_USER}" >> .env
            echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
            echo "DB_URL=${DB_URL}" >> .env
            echo "DB_USER=${DB_USER}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
            echo "REDIS_HOST=${REDIS_HOST}" >> .env
            echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> .env
            echo "JWT_ACCESS_EXP=${JWT_ACCESS_EXP}" >> .env
            echo "JWT_REFRESH_EXP=${JWT_REFRESH_EXP}" >> .env
            echo "JWT_SECRET=${JWT_SECRET}" >> .env
            echo "MONGO_AUTH=${MONGO_AUTH}" >> .env
            echo "MONGO_HOST=${MONGO_HOST}" >> .env
            echo "AWS_ACCESS=${AWS_ACCESS}" >> .env
            echo "AWS_SECRET=${AWS_SECRET}" >> .env
            echo "S3_BUCKET=${S3_BUCKET}" >> .env
            echo "S3_REGION=${S3_REGION}" >> .env
            echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" >> .env
            echo "DOCKERHUB_IMAGE_TAG_NAME=${DOCKERHUB_IMAGE_TAG_NAME}" >> .env

            docker compose down
            docker compose pull
            docker compose up -d --build
          EOF