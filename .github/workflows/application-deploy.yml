name: Deploy to EC2

on:
  push:
    branches:
      - develop
      - CICD

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Multi-Arch Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE_TAG_NAME }}:latest \
            --push .

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          eval "$(ssh-agent -s)"
          ssh-add private_key.pem

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/

      - name: SSH into EC2 and deploy
        env:
          MONGO_DATABASE: ${{ secrets.MONGO_DATABASE }}
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          JWT_ACCESS_EXP: ${{ secrets.JWT_ACCESS_EXP }}
          JWT_REFRESH_EXP: ${{ secrets.JWT_REFRESH_EXP }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_AUTH: ${{ secrets.MONGO_AUTH }}
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_REGION: ${{ secrets.S3_REGION }}
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_IMAGE_TAG_NAME: ${{ vars.DOCKERHUB_IMAGE_TAG_NAME }}
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
            cd /home/ubuntu
          
            echo "MONGO_DATABASE=${MONGO_DATABASE}" > .env
            echo "MONGO_USERNAME=${MONGO_USERNAME}" >> .env
            echo "MONGO_PASSWORD=${MONGO_PASSWORD}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
            echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> .env
            echo "MYSQL_USER=${MYSQL_USER}" >> .env
            echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
            echo "DB_URL=${DB_URL}" >> .env
            echo "DB_USER=${DB_USER}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
            echo "REDIS_HOST=${REDIS_HOST}" >> .env
            echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> .env
            echo "JWT_ACCESS_EXP=${JWT_ACCESS_EXP}" >> .env
            echo "JWT_REFRESH_EXP=${JWT_REFRESH_EXP}" >> .env
            echo "JWT_SECRET=${JWT_SECRET}" >> .env
            echo "MONGO_USER=${MONGO_USER}" >> .env
            echo "MONGO_AUTH=${MONGO_AUTH}" >> .env
            echo "MONGO_HOST=${MONGO_HOST}" >> .env
            echo "AWS_ACCESS=${AWS_ACCESS}" >> .env
            echo "AWS_SECRET=${AWS_SECRET}" >> .env
            echo "S3_BUCKET=${S3_BUCKET}" >> .env
            echo "S3_REGION=${S3_REGION}" >> .env
            echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}" >> .env
            echo "DOCKERHUB_IMAGE_TAG_NAME=${DOCKERHUB_IMAGE_TAG_NAME}" >> .env
            echo "SMTP_EMAIL=${SMTP_EMAIL}" >> .env
            echo "SMTP_PASSWORD=${SMTP_PASSWORD}" >> .env

            echo "환경 변수 확인:"
            cat .env | grep DOCKERHUB
            cat docker-compose.yml
          
            # 현재 실행 중인 컨테이너 중지
            sudo docker compose down --remove-orphans
          
            # 사용하지 않는 리소스 정리
            echo "이전 이미지 정리 중..."
            # 현재 이미지 제외하고 모든 dangling 이미지 삭제
            sudo docker image prune -f
          
            # 디스크 용량 확인
            echo "디스크 사용량 확인: "
            df -h /
            
            # 이미지 내려받기 및 컨테이너 시작
            sudo docker compose pull
            sudo docker compose up -d --force-recreate
          
            # 배포 후 미사용 볼륨 정리
            sudo docker volume prune -f
          
            # 최종 디스크 사용량 확인
            echo "정리 후 디스크 사용량: "
            df -h /
          
            # Docker 이미지 상태 확인
            echo "현재 Docker 이미지 상태:"
            sudo docker image ls | grep "${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE_TAG_NAME}"
          EOF