spring:
  application:
    name: gigsync
  servlet:
    multipart:
      max-request-size: 500MB
      max-file-size: 500MB
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        use_sql_comments: 'true'
        format_sql: 'true'
        show_sql: 'true'
    hibernate:
      ddl-auto: create
  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  cache:
    type: redis
  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}
    mongodb:
      username: ${MONGO_USER}
      password: ${MONGO_PASSWORD}
      host: ${MONGO_HOST}
      port: 27017
      database: gigsync-chat
      authentication-database: ${MONGO_AUTH}
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: chat-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

server:
  error:
    include-message: always
  tomcat:
    max-http-post-size: 500MB

jwt:
  access-token:
    expiration-time: ${JWT_ACCESS_EXP}
  refresh-token:
    expiration-time: ${JWT_REFRESH_EXP}
  secret: ${JWT_SECRET}

cloud:
  aws:
    credentials:
      accessKey: ${AWS_ACCESS}
      secretKey: ${AWS_SECRET}
    s3:
      bucketName: ${S3_BUCKET}
    region:
      static: ${S3_REGION}
    stack:
      auto: 'false'